package com.opencastsoftware.wasm4j;

public enum Opcode {
    UNREACHABLE((byte) 0x00),
    NOP((byte) 0x01),
    BLOCK((byte) 0x02),
    LOOP((byte) 0x03),
    IF((byte) 0x04),
    ELSE((byte) 0x05),
    // RESERVED((byte) 0x06),
    // RESERVED((byte) 0x07),
    // RESERVED((byte) 0x08),
    // RESERVED((byte) 0x09),
    // RESERVED((byte) 0x0A),
    END((byte) 0x0B),
    BR((byte) 0x0C),
    BR_IF((byte) 0x0D),
    BR_TABLE((byte) 0x0E),
    RETURN((byte) 0x0F),
    CALL((byte) 0x10),
    CALL_INDIRECT((byte) 0x11),
    // RESERVED((byte) 0x12),
    // RESERVED((byte) 0x13),
    // RESERVED((byte) 0x14),
    // RESERVED((byte) 0x15),
    // RESERVED((byte) 0x16),
    // RESERVED((byte) 0x17),
    // RESERVED((byte) 0x18),
    // RESERVED((byte) 0x19),
    DROP((byte) 0x1A),
    SELECT((byte) 0x1B),
    SELECT_TYPE((byte) 0x1C),
    // RESERVED((byte) 0x1D),
    // RESERVED((byte) 0x1E),
    // RESERVED((byte) 0x1F),
    LOCAL_GET((byte) 0x20),
    LOCAL_SET((byte) 0x21),
    LOCAL_TEE((byte) 0x22),
    GLOBAL_GET((byte) 0x23),
    GLOBAL_SET((byte) 0x24),
    TABLE_GET((byte) 0x25),
    TABLE_SET((byte) 0x26),
    // RESERVED((byte) 0x27),
    I32_LOAD((byte) 0x28),
    I64_LOAD((byte) 0x29),
    F32_LOAD((byte) 0x2A),
    F64_LOAD((byte) 0x2B),
    I32_LOAD8_S((byte) 0x2C),
    I32_LOAD8_U((byte) 0x2D),
    I32_LOAD16_S((byte) 0x2E),
    I32_LOAD16_U((byte) 0x2F),
    I64_LOAD8_S((byte) 0x30),
    I64_LOAD8_U((byte) 0x31),
    I64_LOAD16_S((byte) 0x32),
    I64_LOAD16_U((byte) 0x33),
    I64_LOAD32_S((byte) 0x34),
    I64_LOAD32_U((byte) 0x35),
    I32_STORE((byte) 0x36),
    I64_STORE((byte) 0x37),
    F32_STORE((byte) 0x38),
    F64_STORE((byte) 0x39),
    I32_STORE8((byte) 0x3A),
    I32_STORE16((byte) 0x3B),
    I64_STORE8((byte) 0x3C),
    I64_STORE16((byte) 0x3D),
    I64_STORE32((byte) 0x3E),
    MEMORY_SIZE((byte) 0x3F),
    MEMORY_GROW((byte) 0x40),
    I32_CONST((byte) 0x41),
    I64_CONST((byte) 0x42),
    F32_CONST((byte) 0x43),
    F64_CONST((byte) 0x44),
    I32_EQZ((byte) 0x45),
    I32_EQ((byte) 0x46),
    I32_NE((byte) 0x47),
    I32_LT_S((byte) 0x48),
    I32_LT_U((byte) 0x49),
    I32_GT_S((byte) 0x4A),
    I32_GT_U((byte) 0x4B),
    I32_LE_S((byte) 0x4C),
    I32_LE_U((byte) 0x4D),
    I32_GE_S((byte) 0x4E),
    I32_GE_U((byte) 0x4F),
    I64_EQZ((byte) 0x50),
    I64_EQ((byte) 0x51),
    I64_NE((byte) 0x52),
    I64_LT_S((byte) 0x53),
    I64_LT_U((byte) 0x54),
    I64_GT_S((byte) 0x55),
    I64_GT_U((byte) 0x56),
    I64_LE_S((byte) 0x57),
    I64_LE_U((byte) 0x58),
    I64_GE_S((byte) 0x59),
    I64_GE_U((byte) 0x5A),
    F32_EQ((byte) 0x5B),
    F32_NE((byte) 0x5C),
    F32_LT((byte) 0x5D),
    F32_GT((byte) 0x5E),
    F32_LE((byte) 0x5F),
    F32_GE((byte) 0x60),
    F64_EQ((byte) 0x61),
    F64_NE((byte) 0x62),
    F64_LT((byte) 0x63),
    F64_GT((byte) 0x64),
    F64_LE((byte) 0x65),
    F64_GE((byte) 0x66),
    I32_CLZ((byte) 0x67),
    I32_CTZ((byte) 0x68),
    I32_POPCNT((byte) 0x69),
    I32_ADD((byte) 0x6A),
    I32_SUB((byte) 0x6B),
    I32_MUL((byte) 0x6C),
    I32_DIV_S((byte) 0x6D),
    I32_DIV_U((byte) 0x6E),
    I32_REM_S((byte) 0x6F),
    I32_REM_U((byte) 0x70),
    I32_AND((byte) 0x71),
    I32_OR((byte) 0x72),
    I32_XOR((byte) 0x73),
    I32_SHL((byte) 0x74),
    I32_SHR_S((byte) 0x75),
    I32_SHR_U((byte) 0x76),
    I32_ROTL((byte) 0x77),
    I32_ROTR((byte) 0x78),
    I64_CLZ((byte) 0x79),
    I64_CTZ((byte) 0x7A),
    I64_POPCNT((byte) 0x7B),
    I64_ADD((byte) 0x7C),
    I64_SUB((byte) 0x7D),
    I64_MUL((byte) 0x7E),
    I64_DIV_S((byte) 0x7F),
    I64_DIV_U((byte) 0x80),
    I64_REM_S((byte) 0x81),
    I64_REM_U((byte) 0x82),
    I64_AND((byte) 0x83),
    I64_OR((byte) 0x84),
    I64_XOR((byte) 0x85),
    I64_SHL((byte) 0x86),
    I64_SHR_S((byte) 0x87),
    I64_SHR_U((byte) 0x88),
    I64_ROTL((byte) 0x89),
    I64_ROTR((byte) 0x8A),
    F32_ABS((byte) 0x8B),
    F32_NEG((byte) 0x8C),
    F32_CEIL((byte) 0x8D),
    F32_FLOOR((byte) 0x8E),
    F32_TRUNC((byte) 0x8F),
    F32_NEAREST((byte) 0x90),
    F32_SQRT((byte) 0x91),
    F32_ADD((byte) 0x92),
    F32_SUB((byte) 0x93),
    F32_MUL((byte) 0x94),
    F32_DIV((byte) 0x95),
    F32_MIN((byte) 0x96),
    F32_MAX((byte) 0x97),
    F32_COPYSIGN((byte) 0x98),
    F64_ABS((byte) 0x99),
    F64_NEG((byte) 0x9A),
    F64_CEIL((byte) 0x9B),
    F64_FLOOR((byte) 0x9C),
    F64_TRUNC((byte) 0x9D),
    F64_NEAREST((byte) 0x9E),
    F64_SQRT((byte) 0x9F),
    F64_ADD((byte) 0xA0),
    F64_SUB((byte) 0xA1),
    F64_MUL((byte) 0xA2),
    F64_DIV((byte) 0xA3),
    F64_MIN((byte) 0xA4),
    F64_MAX((byte) 0xA5),
    F64_COPYSIGN((byte) 0xA6),
    I32_WRAP_I64((byte) 0xA7),
    I32_TRUNC_F32_S((byte) 0xA8),
    I32_TRUNC_F32_U((byte) 0xA9),
    I32_TRUNC_F64_S((byte) 0xAA),
    I32_TRUNC_F64_U((byte) 0xAB),
    I64_EXTEND_I32_S((byte) 0xAC),
    I64_EXTEND_I32_U((byte) 0xAD),
    I64_TRUNC_F32_S((byte) 0xAE),
    I64_TRUNC_F32_U((byte) 0xAF),
    I64_TRUNC_F64_S((byte) 0xB0),
    I64_TRUNC_F64_U((byte) 0xB1),
    // tbc
    ;

    private byte[] bytes;

    Opcode(byte[] bytes) {
        this.bytes = bytes;
    }

    Opcode(byte opcode) {
        this.bytes = new byte[] { opcode };
    }

    public byte[] bytes() {
        return bytes;
    }
}
