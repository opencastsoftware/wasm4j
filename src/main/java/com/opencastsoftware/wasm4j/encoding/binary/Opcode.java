/*
 * SPDX-FileCopyrightText:  Copyright 2023 Opencast Software Europe Ltd
 * SPDX-License-Identifier: Apache-2.0
 */
package com.opencastsoftware.wasm4j.encoding.binary;

public enum Opcode {
    UNREACHABLE((byte) 0x00),
    NOP((byte) 0x01),
    BLOCK((byte) 0x02),
    LOOP((byte) 0x03),
    IF((byte) 0x04),
    ELSE((byte) 0x05),
    // RESERVED((byte) 0x06),
    // RESERVED((byte) 0x07),
    // RESERVED((byte) 0x08),
    // RESERVED((byte) 0x09),
    // RESERVED((byte) 0x0A),
    END((byte) 0x0B),
    BR((byte) 0x0C),
    BR_IF((byte) 0x0D),
    BR_TABLE((byte) 0x0E),
    RETURN((byte) 0x0F),
    CALL((byte) 0x10),
    CALL_INDIRECT((byte) 0x11),
    // RESERVED((byte) 0x12),
    // RESERVED((byte) 0x13),
    CALL_REF((byte) 0x14),
    // RESERVED((byte) 0x15),
    // RESERVED((byte) 0x16),
    // RESERVED((byte) 0x17),
    // RESERVED((byte) 0x18),
    // RESERVED((byte) 0x19),
    DROP((byte) 0x1A),
    SELECT((byte) 0x1B),
    SELECT_TYPE((byte) 0x1C),
    // RESERVED((byte) 0x1D),
    // RESERVED((byte) 0x1E),
    // RESERVED((byte) 0x1F),
    LOCAL_GET((byte) 0x20),
    LOCAL_SET((byte) 0x21),
    LOCAL_TEE((byte) 0x22),
    GLOBAL_GET((byte) 0x23),
    GLOBAL_SET((byte) 0x24),
    TABLE_GET((byte) 0x25),
    TABLE_SET((byte) 0x26),
    // RESERVED((byte) 0x27),
    I32_LOAD((byte) 0x28),
    I64_LOAD((byte) 0x29),
    F32_LOAD((byte) 0x2A),
    F64_LOAD((byte) 0x2B),
    I32_LOAD8_S((byte) 0x2C),
    I32_LOAD8_U((byte) 0x2D),
    I32_LOAD16_S((byte) 0x2E),
    I32_LOAD16_U((byte) 0x2F),
    I64_LOAD8_S((byte) 0x30),
    I64_LOAD8_U((byte) 0x31),
    I64_LOAD16_S((byte) 0x32),
    I64_LOAD16_U((byte) 0x33),
    I64_LOAD32_S((byte) 0x34),
    I64_LOAD32_U((byte) 0x35),
    I32_STORE((byte) 0x36),
    I64_STORE((byte) 0x37),
    F32_STORE((byte) 0x38),
    F64_STORE((byte) 0x39),
    I32_STORE8((byte) 0x3A),
    I32_STORE16((byte) 0x3B),
    I64_STORE8((byte) 0x3C),
    I64_STORE16((byte) 0x3D),
    I64_STORE32((byte) 0x3E),
    MEMORY_SIZE((byte) 0x3F),
    MEMORY_GROW((byte) 0x40),
    I32_CONST((byte) 0x41),
    I64_CONST((byte) 0x42),
    F32_CONST((byte) 0x43),
    F64_CONST((byte) 0x44),
    I32_EQZ((byte) 0x45),
    I32_EQ((byte) 0x46),
    I32_NE((byte) 0x47),
    I32_LT_S((byte) 0x48),
    I32_LT_U((byte) 0x49),
    I32_GT_S((byte) 0x4A),
    I32_GT_U((byte) 0x4B),
    I32_LE_S((byte) 0x4C),
    I32_LE_U((byte) 0x4D),
    I32_GE_S((byte) 0x4E),
    I32_GE_U((byte) 0x4F),
    I64_EQZ((byte) 0x50),
    I64_EQ((byte) 0x51),
    I64_NE((byte) 0x52),
    I64_LT_S((byte) 0x53),
    I64_LT_U((byte) 0x54),
    I64_GT_S((byte) 0x55),
    I64_GT_U((byte) 0x56),
    I64_LE_S((byte) 0x57),
    I64_LE_U((byte) 0x58),
    I64_GE_S((byte) 0x59),
    I64_GE_U((byte) 0x5A),
    F32_EQ((byte) 0x5B),
    F32_NE((byte) 0x5C),
    F32_LT((byte) 0x5D),
    F32_GT((byte) 0x5E),
    F32_LE((byte) 0x5F),
    F32_GE((byte) 0x60),
    F64_EQ((byte) 0x61),
    F64_NE((byte) 0x62),
    F64_LT((byte) 0x63),
    F64_GT((byte) 0x64),
    F64_LE((byte) 0x65),
    F64_GE((byte) 0x66),
    I32_CLZ((byte) 0x67),
    I32_CTZ((byte) 0x68),
    I32_POPCNT((byte) 0x69),
    I32_ADD((byte) 0x6A),
    I32_SUB((byte) 0x6B),
    I32_MUL((byte) 0x6C),
    I32_DIV_S((byte) 0x6D),
    I32_DIV_U((byte) 0x6E),
    I32_REM_S((byte) 0x6F),
    I32_REM_U((byte) 0x70),
    I32_AND((byte) 0x71),
    I32_OR((byte) 0x72),
    I32_XOR((byte) 0x73),
    I32_SHL((byte) 0x74),
    I32_SHR_S((byte) 0x75),
    I32_SHR_U((byte) 0x76),
    I32_ROTL((byte) 0x77),
    I32_ROTR((byte) 0x78),
    I64_CLZ((byte) 0x79),
    I64_CTZ((byte) 0x7A),
    I64_POPCNT((byte) 0x7B),
    I64_ADD((byte) 0x7C),
    I64_SUB((byte) 0x7D),
    I64_MUL((byte) 0x7E),
    I64_DIV_S((byte) 0x7F),
    I64_DIV_U((byte) 0x80),
    I64_REM_S((byte) 0x81),
    I64_REM_U((byte) 0x82),
    I64_AND((byte) 0x83),
    I64_OR((byte) 0x84),
    I64_XOR((byte) 0x85),
    I64_SHL((byte) 0x86),
    I64_SHR_S((byte) 0x87),
    I64_SHR_U((byte) 0x88),
    I64_ROTL((byte) 0x89),
    I64_ROTR((byte) 0x8A),
    F32_ABS((byte) 0x8B),
    F32_NEG((byte) 0x8C),
    F32_CEIL((byte) 0x8D),
    F32_FLOOR((byte) 0x8E),
    F32_TRUNC((byte) 0x8F),
    F32_NEAREST((byte) 0x90),
    F32_SQRT((byte) 0x91),
    F32_ADD((byte) 0x92),
    F32_SUB((byte) 0x93),
    F32_MUL((byte) 0x94),
    F32_DIV((byte) 0x95),
    F32_MIN((byte) 0x96),
    F32_MAX((byte) 0x97),
    F32_COPYSIGN((byte) 0x98),
    F64_ABS((byte) 0x99),
    F64_NEG((byte) 0x9A),
    F64_CEIL((byte) 0x9B),
    F64_FLOOR((byte) 0x9C),
    F64_TRUNC((byte) 0x9D),
    F64_NEAREST((byte) 0x9E),
    F64_SQRT((byte) 0x9F),
    F64_ADD((byte) 0xA0),
    F64_SUB((byte) 0xA1),
    F64_MUL((byte) 0xA2),
    F64_DIV((byte) 0xA3),
    F64_MIN((byte) 0xA4),
    F64_MAX((byte) 0xA5),
    F64_COPYSIGN((byte) 0xA6),
    I32_WRAP_I64((byte) 0xA7),
    I32_TRUNC_F32_S((byte) 0xA8),
    I32_TRUNC_F32_U((byte) 0xA9),
    I32_TRUNC_F64_S((byte) 0xAA),
    I32_TRUNC_F64_U((byte) 0xAB),
    I64_EXTEND_I32_S((byte) 0xAC),
    I64_EXTEND_I32_U((byte) 0xAD),
    I64_TRUNC_F32_S((byte) 0xAE),
    I64_TRUNC_F32_U((byte) 0xAF),
    I64_TRUNC_F64_S((byte) 0xB0),
    I64_TRUNC_F64_U((byte) 0xB1),
    F32_CONVERT_I32_S((byte) 0xB2),
    F32_CONVERT_I32_U((byte) 0xB3),
    F32_CONVERT_I64_S((byte) 0xB4),
    F32_CONVERT_I64_U((byte) 0xB5),
    F32_DEMOTE_F64((byte) 0xB6),
    F64_CONVERT_I32_S((byte) 0xB7),
    F64_CONVERT_I32_U((byte) 0xB8),
    F64_CONVERT_I64_S((byte) 0xB9),
    F64_CONVERT_I64_U((byte) 0xBA),
    F64_PROMOTE_F32((byte) 0xBB),
    I32_REINTERPRET_F32((byte) 0xBC),
    I64_REINTERPRET_F64((byte) 0xBD),
    F32_REINTERPRET_I32((byte) 0xBE),
    F64_REINTERPRET_I64((byte) 0xBF),
    I32_EXTEND8_S((byte) 0xC0),
    I32_EXTEND16_S((byte) 0xC1),
    I64_EXTEND8_S((byte) 0xC2),
    I64_EXTEND16_S((byte) 0xC3),
    I64_EXTEND32_S((byte) 0xC4),
    // RESERVED((byte) 0xC5),
    // RESERVED((byte) 0xC6),
    // RESERVED((byte) 0xC7),
    // RESERVED((byte) 0xC8),
    // RESERVED((byte) 0xC9),
    // RESERVED((byte) 0xCA),
    // RESERVED((byte) 0xCB),
    // RESERVED((byte) 0xCC),
    // RESERVED((byte) 0xCD),
    // RESERVED((byte) 0xCE),
    // RESERVED((byte) 0xCF),
    REF_NULL((byte) 0xD0),
    REF_IS_NULL((byte) 0xD1),
    REF_FUNC((byte) 0xD2),
    REF_AS_NON_NULL((byte) 0xD3),
    BR_ON_NULL((byte) 0xD4),
    REF_EQ((byte) 0xD5),
    BR_ON_NON_NULL((byte) 0xD6),
    // RESERVED((byte) 0xD7),
    // RESERVED((byte) 0xD8),
    // RESERVED((byte) 0xD9),
    // RESERVED((byte) 0xDA),
    // RESERVED((byte) 0xDB),
    // RESERVED((byte) 0xDC),
    // RESERVED((byte) 0xDD),
    // RESERVED((byte) 0xDE),
    // RESERVED((byte) 0xDF),
    // RESERVED((byte) 0xE0),
    // RESERVED((byte) 0xE1),
    // RESERVED((byte) 0xE2),
    // RESERVED((byte) 0xE3),
    // RESERVED((byte) 0xE4),
    // RESERVED((byte) 0xE5),
    // RESERVED((byte) 0xE6),
    // RESERVED((byte) 0xE7),
    // RESERVED((byte) 0xE8),
    // RESERVED((byte) 0xE9),
    // RESERVED((byte) 0xEA),
    // RESERVED((byte) 0xEB),
    // RESERVED((byte) 0xEC),
    // RESERVED((byte) 0xED),
    // RESERVED((byte) 0xEE),
    // RESERVED((byte) 0xEF),
    // RESERVED((byte) 0xF0),
    // RESERVED((byte) 0xF1),
    // RESERVED((byte) 0xF2),
    // RESERVED((byte) 0xF3),
    // RESERVED((byte) 0xF4),
    // RESERVED((byte) 0xF5),
    // RESERVED((byte) 0xF6),
    // RESERVED((byte) 0xF7),
    // RESERVED((byte) 0xF8),
    // RESERVED((byte) 0xF9),
    // RESERVED((byte) 0xFA),
    // RESERVED((byte) 0xFB),
    // FB Extensions (GC Spec)
    STRUCT_NEW_CANON(new byte[]{(byte) 0xFB, (byte) 0x01}),
    STRUCT_NEW_CANON_DEFAULT(new byte[]{(byte) 0xFB, (byte) 0x02}),
    STRUCT_GET(new byte[]{(byte) 0xFB, (byte) 0x03}),
    STRUCT_GET_S(new byte[]{(byte) 0xFB, (byte) 0x04}),
    STRUCT_GET_U(new byte[]{(byte) 0xFB, (byte) 0x05}),
    STRUCT_SET(new byte[]{(byte) 0xFB, (byte) 0x06}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x07}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x08}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x09}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0A}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0B}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0C}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0D}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0E}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x0F}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x10}),
    ARRAY_NEW_CANON(new byte[]{(byte) 0xFB, (byte) 0x11}),
    ARRAY_NEW_CANON_DEFAULT(new byte[]{(byte) 0xFB, (byte) 0x12}),
    ARRAY_GET(new byte[]{(byte) 0xFB, (byte) 0x13}),
    ARRAY_GET_S(new byte[]{(byte) 0xFB, (byte) 0x14}),
    ARRAY_GET_U(new byte[]{(byte) 0xFB, (byte) 0x15}),
    ARRAY_SET(new byte[]{(byte) 0xFB, (byte) 0x16}),
    ARRAY_LEN(new byte[]{(byte) 0xFB, (byte) 0x17}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x18}),
    ARRAY_NEW_CANON_FIXED(new byte[]{(byte) 0xFB, (byte) 0x19}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x1A}),
    ARRAY_NEW_CANON_DATA(new byte[]{(byte) 0xFB, (byte) 0x1B}),
    ARRAY_NEW_CANON_ELEM(new byte[]{(byte) 0xFB, (byte) 0x1C}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x1D}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x1E}),
    // RESERVED(new byte[]{(byte) 0xFB, (byte) 0x1F}),
    I31_NEW(new byte[]{(byte) 0xFB, (byte) 0x20}),
    I31_GET_S(new byte[]{(byte) 0xFB, (byte) 0x21}),
    I31_GET_U(new byte[]{(byte) 0xFB, (byte) 0x22}),
    // 0xFB23 .. 0xFB3F reserved
    REF_TEST(new byte[]{(byte) 0xFB, (byte) 0x40}),
    REF_CAST(new byte[]{(byte) 0xFB, (byte) 0x41}),
    BR_ON_CAST(new byte[]{(byte) 0xFB, (byte) 0x42}),
    BR_ON_CAST_FAIL(new byte[]{(byte) 0xFB, (byte) 0x43}),
    // 0xFB44 .. 0xFB47 reserved
    REF_TEST_NULL(new byte[]{(byte) 0xFB, (byte) 0x48}),
    REF_CAST_NULL(new byte[]{(byte) 0xFB, (byte) 0x49}),
    BR_ON_CAST_NULL(new byte[]{(byte) 0xFB, (byte) 0x4A}),
    BR_ON_CAST_FAIL_NULL(new byte[]{(byte) 0xFB, (byte) 0x4B}),
    // 0xFB4C .. 0xFB6F reserved
    EXTERN_INTERNALIZE(new byte[]{(byte) 0xFB, (byte) 0x70}),
    EXTERN_EXTERNALIZE(new byte[]{(byte) 0xFB, (byte) 0x71}),
    // FC Extensions
    I32_TRUNC_SAT_F32_S(new byte[]{(byte) 0xFC, (byte) 0x00}),
    I32_TRUNC_SAT_F32_U(new byte[]{(byte) 0xFC, (byte) 0x01}),
    I32_TRUNC_SAT_F64_S(new byte[]{(byte) 0xFC, (byte) 0x02}),
    I32_TRUNC_SAT_F64_U(new byte[]{(byte) 0xFC, (byte) 0x03}),
    I64_TRUNC_SAT_F32_S(new byte[]{(byte) 0xFC, (byte) 0x04}),
    I64_TRUNC_SAT_F32_U(new byte[]{(byte) 0xFC, (byte) 0x05}),
    I64_TRUNC_SAT_F64_S(new byte[]{(byte) 0xFC, (byte) 0x06}),
    I64_TRUNC_SAT_F64_U(new byte[]{(byte) 0xFC, (byte) 0x07}),
    MEMORY_INIT(new byte[]{(byte) 0xFC, (byte) 0x08}),
    DATA_DROP(new byte[]{(byte) 0xFC, (byte) 0x09}),
    MEMORY_COPY(new byte[]{(byte) 0xFC, (byte) 0xA}),
    MEMORY_FILL(new byte[]{(byte) 0xFC, (byte) 0xB}),
    TABLE_INIT(new byte[]{(byte) 0xFC, (byte) 0x0C}),
    ELEM_DROP(new byte[]{(byte) 0xFC, (byte) 0x0D}),
    TABLE_COPY(new byte[]{(byte) 0xFC, (byte) 0x0E}),
    TABLE_GROW(new byte[]{(byte) 0xFC, (byte) 0x0F}),
    TABLE_SIZE(new byte[]{(byte) 0xFC, (byte) 0x10}),
    TABLE_FILL(new byte[]{(byte) 0xFC, (byte) 0x11}),
    // SIMD Extensions
    V128_LOAD(new byte[]{(byte) 0xFD, (byte) 0x00}),
    V128_LOAD8X8_S(new byte[]{(byte) 0xFD, (byte) 0x01}),
    V128_LOAD8X8_U(new byte[]{(byte) 0xFD, (byte) 0x02}),
    V128_LOAD16X4_S(new byte[]{(byte) 0xFD, (byte) 0x03}),
    V128_LOAD16X4_U(new byte[]{(byte) 0xFD, (byte) 0x04}),
    V128_LOAD32X2_S(new byte[]{(byte) 0xFD, (byte) 0x05}),
    V128_LOAD32X2_U(new byte[]{(byte) 0xFD, (byte) 0x06}),
    V128_LOAD8_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x07}),
    V128_LOAD16_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x08}),
    V128_LOAD32_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x09}),
    V128_LOAD64_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x0A}),
    V128_STORE(new byte[]{(byte) 0xFD, (byte) 0x0B}),
    V128_CONST(new byte[]{(byte) 0xFD, (byte) 0x0C}),
    I8X16_SHUFFLE(new byte[]{(byte) 0xFD, (byte) 0x0D}),
    I8X16_SWIZZLE(new byte[]{(byte) 0xFD, (byte) 0x0E}),
    I8X16_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x0F}),
    I16X8_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x10}),
    I32X4_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x11}),
    I64X2_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x12}),
    F32X4_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x13}),
    F64X2_SPLAT(new byte[]{(byte) 0xFD, (byte) 0x14}),
    I8X16_EXTRACT_LANE_S(new byte[]{(byte) 0xFD, (byte) 0x15}),
    I8X16_EXTRACT_LANE_U(new byte[]{(byte) 0xFD, (byte) 0x16}),
    I8X16_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x17}),
    I16X8_EXTRACT_LANE_S(new byte[]{(byte) 0xFD, (byte) 0x18}),
    I16X8_EXTRACT_LANE_U(new byte[]{(byte) 0xFD, (byte) 0x19}),
    I16X8_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x1A}),
    I32X4_EXTRACT_LANE(new byte[]{(byte) 0xFD, (byte) 0x1B}),
    I32X4_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x1C}),
    I64X2_EXTRACT_LANE(new byte[]{(byte) 0xFD, (byte) 0x1D}),
    I64X2_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x1E}),
    F32X4_EXTRACT_LANE(new byte[]{(byte) 0xFD, (byte) 0x1F}),
    F32X4_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x20}),
    F64X2_EXTRACT_LANE(new byte[]{(byte) 0xFD, (byte) 0x21}),
    F64X2_REPLACE_LANE(new byte[]{(byte) 0xFD, (byte) 0x22}),
    I8X16_EQ(new byte[]{(byte) 0xFD, (byte) 0x23}),
    I8X16_NE(new byte[]{(byte) 0xFD, (byte) 0x24}),
    I8X16_LT_S(new byte[]{(byte) 0xFD, (byte) 0x25}),
    I8X16_LT_U(new byte[]{(byte) 0xFD, (byte) 0x26}),
    I8X16_GT_S(new byte[]{(byte) 0xFD, (byte) 0x27}),
    I8X16_GT_U(new byte[]{(byte) 0xFD, (byte) 0x28}),
    I8X16_LE_S(new byte[]{(byte) 0xFD, (byte) 0x29}),
    I8X16_LE_U(new byte[]{(byte) 0xFD, (byte) 0x2A}),
    I8X16_GE_S(new byte[]{(byte) 0xFD, (byte) 0x2B}),
    I8X16_GE_U(new byte[]{(byte) 0xFD, (byte) 0x2C}),
    I16X8_EQ(new byte[]{(byte) 0xFD, (byte) 0x2D}),
    I16X8_NE(new byte[]{(byte) 0xFD, (byte) 0x2E}),
    I16X8_LT_S(new byte[]{(byte) 0xFD, (byte) 0x2F}),
    I16X8_LT_U(new byte[]{(byte) 0xFD, (byte) 0x30}),
    I16X8_GT_S(new byte[]{(byte) 0xFD, (byte) 0x31}),
    I16X8_GT_U(new byte[]{(byte) 0xFD, (byte) 0x32}),
    I16X8_LE_S(new byte[]{(byte) 0xFD, (byte) 0x33}),
    I16X8_LE_U(new byte[]{(byte) 0xFD, (byte) 0x34}),
    I16X8_GE_S(new byte[]{(byte) 0xFD, (byte) 0x35}),
    I16X8_GE_U(new byte[]{(byte) 0xFD, (byte) 0x36}),
    I32X4_EQ(new byte[]{(byte) 0xFD, (byte) 0x37}),
    I32X4_NE(new byte[]{(byte) 0xFD, (byte) 0x38}),
    I32X4_LT_S(new byte[]{(byte) 0xFD, (byte) 0x39}),
    I32X4_LT_U(new byte[]{(byte) 0xFD, (byte) 0x3A}),
    I32X4_GT_S(new byte[]{(byte) 0xFD, (byte) 0x3B}),
    I32X4_GT_U(new byte[]{(byte) 0xFD, (byte) 0x3C}),
    I32X4_LE_S(new byte[]{(byte) 0xFD, (byte) 0x3D}),
    I32X4_LE_U(new byte[]{(byte) 0xFD, (byte) 0x3E}),
    I32X4_GE_S(new byte[]{(byte) 0xFD, (byte) 0x3F}),
    I32X4_GE_U(new byte[]{(byte) 0xFD, (byte) 0x40}),
    F32X4_EQ(new byte[]{(byte) 0xFD, (byte) 0x41}),
    F32X4_NE(new byte[]{(byte) 0xFD, (byte) 0x42}),
    F32X4_LT(new byte[]{(byte) 0xFD, (byte) 0x43}),
    F32X4_GT(new byte[]{(byte) 0xFD, (byte) 0x44}),
    F32X4_LE(new byte[]{(byte) 0xFD, (byte) 0x45}),
    F32X4_GE(new byte[]{(byte) 0xFD, (byte) 0x46}),
    F64X2_EQ(new byte[]{(byte) 0xFD, (byte) 0x47}),
    F64X2_NE(new byte[]{(byte) 0xFD, (byte) 0x48}),
    F64X2_LT(new byte[]{(byte) 0xFD, (byte) 0x49}),
    F64X2_GT(new byte[]{(byte) 0xFD, (byte) 0x4A}),
    F64X2_LE(new byte[]{(byte) 0xFD, (byte) 0x4B}),
    F64X2_GE(new byte[]{(byte) 0xFD, (byte) 0x4C}),
    V128_NOT(new byte[]{(byte) 0xFD, (byte) 0x4D}),
    V128_AND(new byte[]{(byte) 0xFD, (byte) 0x4E}),
    V128_ANDNOT(new byte[]{(byte) 0xFD, (byte) 0x4F}),
    V128_OR(new byte[]{(byte) 0xFD, (byte) 0x50}),
    V128_XOR(new byte[]{(byte) 0xFD, (byte) 0x51}),
    V128_BITSELECT(new byte[]{(byte) 0xFD, (byte) 0x52}),
    V128_ANY_TRUE(new byte[]{(byte) 0xFD, (byte) 0x53}),
    V128_LOAD8_LANE(new byte[]{(byte) 0xFD, (byte) 0x54}),
    V128_LOAD16_LANE(new byte[]{(byte) 0xFD, (byte) 0x55}),
    V128_LOAD32_LANE(new byte[]{(byte) 0xFD, (byte) 0x56}),
    V128_LOAD64_LANE(new byte[]{(byte) 0xFD, (byte) 0x57}),
    V128_STORE8_LANE(new byte[]{(byte) 0xFD, (byte) 0x58}),
    V128_STORE16_LANE(new byte[]{(byte) 0xFD, (byte) 0x59}),
    V128_STORE32_LANE(new byte[]{(byte) 0xFD, (byte) 0x5A}),
    V128_STORE64_LANE(new byte[]{(byte) 0xFD, (byte) 0x5B}),
    V128_LOAD32_ZERO(new byte[]{(byte) 0xFD, (byte) 0x5C}),
    V128_LOAD64_ZERO(new byte[]{(byte) 0xFD, (byte) 0x5D}),
    F32X4_DEMOTE_F64X2_ZERO(new byte[]{(byte) 0xFD, (byte) 0x5E}),
    F64X2_PROMOTE_LOW_F32X4(new byte[]{(byte) 0xFD, (byte) 0x5F}),
    I8X16_ABS(new byte[]{(byte) 0xFD, (byte) 0x60}),
    I8X16_NEG(new byte[]{(byte) 0xFD, (byte) 0x61}),
    I8X16_POPCNT(new byte[]{(byte) 0xFD, (byte) 0x62}),
    I8X16_ALL_TRUE(new byte[]{(byte) 0xFD, (byte) 0x63}),
    I8X16_BITMASK(new byte[]{(byte) 0xFD, (byte) 0x64}),
    I8X16_NARROW_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0x65}),
    I8X16_NARROW_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0x66}),
    F32X4_CEIL(new byte[]{(byte) 0xFD, (byte) 0x67}),
    F32X4_FLOOR(new byte[]{(byte) 0xFD, (byte) 0x68}),
    F32X4_TRUNC(new byte[]{(byte) 0xFD, (byte) 0x69}),
    F32X4_NEAREST(new byte[]{(byte) 0xFD, (byte) 0x6A}),
    I8X16_SHL(new byte[]{(byte) 0xFD, (byte) 0x6B}),
    I8X16_SHR_S(new byte[]{(byte) 0xFD, (byte) 0x6C}),
    I8X16_SHR_U(new byte[]{(byte) 0xFD, (byte) 0x6D}),
    I8X16_ADD(new byte[]{(byte) 0xFD, (byte) 0x6E}),
    I8X16_ADD_SAT_S(new byte[]{(byte) 0xFD, (byte) 0x6F}),
    I8X16_ADD_SAT_U(new byte[]{(byte) 0xFD, (byte) 0x70}),
    I8X16_SUB(new byte[]{(byte) 0xFD, (byte) 0x71}),
    I8X16_SUB_SAT_S(new byte[]{(byte) 0xFD, (byte) 0x72}),
    I8X16_SUB_SAT_U(new byte[]{(byte) 0xFD, (byte) 0x73}),
    F64X2_CEIL(new byte[]{(byte) 0xFD, (byte) 0x74}),
    F64X2_FLOOR(new byte[]{(byte) 0xFD, (byte) 0x75}),
    I8X16_MIN_S(new byte[]{(byte) 0xFD, (byte) 0x76}),
    I8X16_MIN_U(new byte[]{(byte) 0xFD, (byte) 0x77}),
    I8X16_MAX_S(new byte[]{(byte) 0xFD, (byte) 0x78}),
    I8X16_MAX_U(new byte[]{(byte) 0xFD, (byte) 0x79}),
    F64X2_TRUNC(new byte[]{(byte) 0xFD, (byte) 0x7A}),
    I8X16_AVGR_U(new byte[]{(byte) 0xFD, (byte) 0x7B}),
    I16X8_EXTADD_PAIRWISE_I8X16_S(new byte[]{(byte) 0xFD, (byte) 0x7C}),
    I16X8_EXTADD_PAIRWISE_I8X16_U(new byte[]{(byte) 0xFD, (byte) 0x7D}),
    I32X4_EXTADD_PAIRWISE_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0x7E}),
    I32X4_EXTADD_PAIRWISE_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0x7F}),
    I16X8_ABS(new byte[]{(byte) 0xFD, (byte) 0x80, (byte) 0x01}),
    I16X8_NEG(new byte[]{(byte) 0xFD, (byte) 0x81, (byte) 0x01}),
    I16X8_Q15MULR_SAT_S(new byte[]{(byte) 0xFD, (byte) 0x82, (byte) 0x01}),
    I16X8_ALL_TRUE(new byte[]{(byte) 0xFD, (byte) 0x83, (byte) 0x01}),
    I16X8_BITMASK(new byte[]{(byte) 0xFD, (byte) 0x84, (byte) 0x01}),
    I16X8_NARROW_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0x85, (byte) 0x01}),
    I16X8_NARROW_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0x86, (byte) 0x01}),
    I16X8_EXTEND_LOW_I8X16_S(new byte[]{(byte) 0xFD, (byte) 0x87, (byte) 0x01}),
    I16X8_EXTEND_HIGH_I8X16_S(new byte[]{(byte) 0xFD, (byte) 0x88, (byte) 0x01}),
    I16X8_EXTEND_LOW_I8X16_U(new byte[]{(byte) 0xFD, (byte) 0x89, (byte) 0x01}),
    I16X8_EXTEND_HIGH_I8X16_U(new byte[]{(byte) 0xFD, (byte) 0x8A, (byte) 0x01}),
    I16X8_SHL(new byte[]{(byte) 0xFD, (byte) 0x8B, (byte) 0x01}),
    I16X8_SHR_S(new byte[]{(byte) 0xFD, (byte) 0x8C, (byte) 0x01}),
    I16X8_SHR_U(new byte[]{(byte) 0xFD, (byte) 0x8D, (byte) 0x01}),
    I16X8_ADD(new byte[]{(byte) 0xFD, (byte) 0x8E, (byte) 0x01}),
    I16X8_ADD_SAT_S(new byte[]{(byte) 0xFD, (byte) 0x8F, (byte) 0x01}),
    I16X8_ADD_SAT_U(new byte[]{(byte) 0xFD, (byte) 0x90, (byte) 0x01}),
    I16X8_SUB(new byte[]{(byte) 0xFD, (byte) 0x91, (byte) 0x01}),
    I16X8_SUB_SAT_S(new byte[]{(byte) 0xFD, (byte) 0x92, (byte) 0x01}),
    I16X8_SUB_SAT_U(new byte[]{(byte) 0xFD, (byte) 0x93, (byte) 0x01}),
    F64X2_NEAREST(new byte[]{(byte) 0xFD, (byte) 0x94, (byte) 0x01}),
    I16X8_MUL(new byte[]{(byte) 0xFD, (byte) 0x95, (byte) 0x01}),
    I16X8_MIN_S(new byte[]{(byte) 0xFD, (byte) 0x96, (byte) 0x01}),
    I16X8_MIN_U(new byte[]{(byte) 0xFD, (byte) 0x97, (byte) 0x01}),
    I16X8_MAX_S(new byte[]{(byte) 0xFD, (byte) 0x98, (byte) 0x01}),
    I16X8_MAX_U(new byte[]{(byte) 0xFD, (byte) 0x99, (byte) 0x01}),
    I16X8_AVGR_U(new byte[]{(byte) 0xFD, (byte) 0x9B, (byte) 0x01}),
    I16X8_EXTMUL_LOW_I8X16_S(new byte[]{(byte) 0xFD, (byte) 0x9C, (byte) 0x01}),
    I16X8_EXTMUL_HIGH_I8X16_S(new byte[]{(byte) 0xFD, (byte) 0x9D, (byte) 0x01}),
    I16X8_EXTMUL_LOW_I8X16_U(new byte[]{(byte) 0xFD, (byte) 0x9E, (byte) 0x01}),
    I16X8_EXTMUL_HIGH_I8X16_U(new byte[]{(byte) 0xFD, (byte) 0x9F, (byte) 0x01}),
    I32X4_ABS(new byte[]{(byte) 0xFD, (byte) 0xA0, (byte) 0x01}),
    I32X4_NEG(new byte[]{(byte) 0xFD, (byte) 0xA1, (byte) 0x01}),
    I32X4_ALL_TRUE(new byte[]{(byte) 0xFD, (byte) 0xA3, (byte) 0x01}),
    I32X4_BITMASK(new byte[]{(byte) 0xFD, (byte) 0xA4, (byte) 0x01}),
    I32X4_EXTEND_LOW_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0xA7, (byte) 0x01}),
    I32X4_EXTEND_HIGH_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0xA8, (byte) 0x01}),
    I32X4_EXTEND_LOW_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0xA9, (byte) 0x01}),
    I32X4_EXTEND_HIGH_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0xAA, (byte) 0x01}),
    I32X4_SHL(new byte[]{(byte) 0xFD, (byte) 0xAB, (byte) 0x01}),
    I32X4_SHR_S(new byte[]{(byte) 0xFD, (byte) 0xAC, (byte) 0x01}),
    I32X4_SHR_U(new byte[]{(byte) 0xFD, (byte) 0xAD, (byte) 0x01}),
    I32X4_ADD(new byte[]{(byte) 0xFD, (byte) 0xAE, (byte) 0x01}),
    I32X4_SUB(new byte[]{(byte) 0xFD, (byte) 0xB1, (byte) 0x01}),
    I32X4_MUL(new byte[]{(byte) 0xFD, (byte) 0xB5, (byte) 0x01}),
    I32X4_MIN_S(new byte[]{(byte) 0xFD, (byte) 0xB6, (byte) 0x01}),
    I32X4_MIN_U(new byte[]{(byte) 0xFD, (byte) 0xB7, (byte) 0x01}),
    I32X4_MAX_S(new byte[]{(byte) 0xFD, (byte) 0xB8, (byte) 0x01}),
    I32X4_MAX_U(new byte[]{(byte) 0xFD, (byte) 0xB9, (byte) 0x01}),
    I32X4_DOT_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0xBA, (byte) 0x01}),
    I32X4_EXTMUL_LOW_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0xBC, (byte) 0x01}),
    I32X4_EXTMUL_HIGH_I16X8_S(new byte[]{(byte) 0xFD, (byte) 0xBD, (byte) 0x01}),
    I32X4_EXTMUL_LOW_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0xBE, (byte) 0x01}),
    I32X4_EXTMUL_HIGH_I16X8_U(new byte[]{(byte) 0xFD, (byte) 0xBF, (byte) 0x01}),
    I64X2_ABS(new byte[]{(byte) 0xFD, (byte) 0xC0, (byte) 0x01}),
    I64X2_NEG(new byte[]{(byte) 0xFD, (byte) 0xC1, (byte) 0x01}),
    I64X2_ALL_TRUE(new byte[]{(byte) 0xFD, (byte) 0xC3, (byte) 0x01}),
    I64X2_BITMASK(new byte[]{(byte) 0xFD, (byte) 0xC4, (byte) 0x01}),
    I64X2_EXTEND_LOW_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xC7, (byte) 0x01}),
    I64X2_EXTEND_HIGH_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xC8, (byte) 0x01}),
    I64X2_EXTEND_LOW_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0xC9, (byte) 0x01}),
    I64X2_EXTEND_HIGH_I132X4_U(new byte[]{(byte) 0xFD, (byte) 0xCA, (byte) 0x01}),
    I64X2_SHL(new byte[]{(byte) 0xFD, (byte) 0xCB, (byte) 0x01}),
    I64X2_SHR_S(new byte[]{(byte) 0xFD, (byte) 0xCC, (byte) 0x01}),
    I64X2_SHR_U(new byte[]{(byte) 0xFD, (byte) 0xCD, (byte) 0x01}),
    I64X2_ADD(new byte[]{(byte) 0xFD, (byte) 0xCE, (byte) 0x01}),
    I64X2_SUB(new byte[]{(byte) 0xFD, (byte) 0xD1, (byte) 0x01}),
    I64X2_MUL(new byte[]{(byte) 0xFD, (byte) 0xD5, (byte) 0x01}),
    I64X2_EQ(new byte[]{(byte) 0xFD, (byte) 0xD6, (byte) 0x01}),
    I64X2_NE(new byte[]{(byte) 0xFD, (byte) 0xD7, (byte) 0x01}),
    I64X2_LT_S(new byte[]{(byte) 0xFD, (byte) 0xD8, (byte) 0x01}),
    I64X2_GT_S(new byte[]{(byte) 0xFD, (byte) 0xD9, (byte) 0x01}),
    I64X2_LE_S(new byte[]{(byte) 0xFD, (byte) 0xDA, (byte) 0x01}),
    I64X2_GE_S(new byte[]{(byte) 0xFD, (byte) 0xDB, (byte) 0x01}),
    I64X2_EXTMUL_LOW_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xDC, (byte) 0x01}),
    I64X2_EXTMUL_HIGH_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xDD, (byte) 0x01}),
    I64X2_EXTMUL_LOW_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0xDE, (byte) 0x01}),
    I64X2_EXTMUL_HIGH_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0xDF, (byte) 0x01}),
    F32X4_ABS(new byte[]{(byte) 0xFD, (byte) 0xE0, (byte) 0x01}),
    F32X4_NEG(new byte[]{(byte) 0xFD, (byte) 0xE1, (byte) 0x01}),
    F32X4_SQRT(new byte[]{(byte) 0xFD, (byte) 0xE3, (byte) 0x01}),
    F32X4_ADD(new byte[]{(byte) 0xFD, (byte) 0xE4, (byte) 0x01}),
    F32X4_SUB(new byte[]{(byte) 0xFD, (byte) 0xE5, (byte) 0x01}),
    F32X4_MUL(new byte[]{(byte) 0xFD, (byte) 0xE6, (byte) 0x01}),
    F32X4_DIV(new byte[]{(byte) 0xFD, (byte) 0xE7, (byte) 0x01}),
    F32X4_MIN(new byte[]{(byte) 0xFD, (byte) 0xE8, (byte) 0x01}),
    F32X4_MAX(new byte[]{(byte) 0xFD, (byte) 0xE9, (byte) 0x01}),
    F32X4_PMIN(new byte[]{(byte) 0xFD, (byte) 0xEA, (byte) 0x01}),
    F32X4_PMAX(new byte[]{(byte) 0xFD, (byte) 0xEB, (byte) 0x01}),
    F64X2_ABS(new byte[]{(byte) 0xFD, (byte) 0xEC, (byte) 0x01}),
    F64X2_NEG(new byte[]{(byte) 0xFD, (byte) 0xED, (byte) 0x01}),
    F64X2_SQRT(new byte[]{(byte) 0xFD, (byte) 0xEF, (byte) 0x01}),
    F64X2_ADD(new byte[]{(byte) 0xFD, (byte) 0xF0, (byte) 0x01}),
    F64X2_SUB(new byte[]{(byte) 0xFD, (byte) 0xF1, (byte) 0x01}),
    F64X2_MUL(new byte[]{(byte) 0xFD, (byte) 0xF2, (byte) 0x01}),
    F64X2_DIV(new byte[]{(byte) 0xFD, (byte) 0xF3, (byte) 0x01}),
    F64X2_MIN(new byte[]{(byte) 0xFD, (byte) 0xF4, (byte) 0x01}),
    F64X2_MAX(new byte[]{(byte) 0xFD, (byte) 0xF5, (byte) 0x01}),
    F64X2_PMIN(new byte[]{(byte) 0xFD, (byte) 0xF6, (byte) 0x01}),
    F64X2_PMAX(new byte[]{(byte) 0xFD, (byte) 0xF7, (byte) 0x01}),
    I32X4_TRUNC_SAT_F32X4_S(new byte[]{(byte) 0xFD, (byte) 0xF8, (byte) 0x01}),
    I32X4_TRUNC_SAT_F32X4_U(new byte[]{(byte) 0xFD, (byte) 0xF9, (byte) 0x01}),
    F32X4_CONVERT_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xFA, (byte) 0x01}),
    F32X4_CONVERT_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0xFB, (byte) 0x01}),
    I32X4_TRUNC_SAT_F64X2_S_ZERO(new byte[]{(byte) 0xFD, (byte) 0xFC, (byte) 0x01}),
    I32X4_TRUNC_SAT_F64X2_U_ZERO(new byte[]{(byte) 0xFD, (byte) 0xFD, (byte) 0x01}),
    F64X2_CONVERT_LOW_I32X4_S(new byte[]{(byte) 0xFD, (byte) 0xFE, (byte) 0x01}),
    F64X2_CONVERT_LOW_I32X4_U(new byte[]{(byte) 0xFD, (byte) 0xFF, (byte) 0x01}),
    ;

    private final byte[] bytes;

    Opcode(byte[] bytes) {
        this.bytes = bytes;
    }

    Opcode(byte opcode) {
        this.bytes = new byte[]{opcode};
    }

    public byte opcode() {
        return bytes[0];
    }

    public byte[] bytes() {
        return bytes;
    }
}
